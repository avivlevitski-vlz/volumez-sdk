// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/avivlevitski-vlz/volumez-sdk/internal/utils"
	"github.com/avivlevitski-vlz/volumez-sdk/models/components"
)

type Volumes struct {
	// policy name for the planned volume
	Policy *string `json:"Policy,omitempty"`
	// volume size in GiB
	Size int64   `json:"Size"`
	Zone *string `json:"Zone,omitempty"`
}

func (o *Volumes) GetPolicy() *string {
	if o == nil {
		return nil
	}
	return o.Policy
}

func (o *Volumes) GetSize() int64 {
	if o == nil {
		return 0
	}
	return o.Size
}

func (o *Volumes) GetZone() *string {
	if o == nil {
		return nil
	}
	return o.Zone
}

type BatchVolumesPlanRequestBody struct {
	Volumes []Volumes `json:"Volumes,omitempty"`
	// capacity groups to create the volume from (optional)
	CapacityGroup *string `json:"CapacityGroup,omitempty"`
	// zone parameter for all volumes that dont have zone parameter
	DefaultZone *string `json:"DefaultZone,omitempty"`
	// policy parameter for all volumes that dont have policy parameter defined in their input
	DefaultPolicy *string `json:"DefaultPolicy,omitempty"`
}

func (o *BatchVolumesPlanRequestBody) GetVolumes() []Volumes {
	if o == nil {
		return nil
	}
	return o.Volumes
}

func (o *BatchVolumesPlanRequestBody) GetCapacityGroup() *string {
	if o == nil {
		return nil
	}
	return o.CapacityGroup
}

func (o *BatchVolumesPlanRequestBody) GetDefaultZone() *string {
	if o == nil {
		return nil
	}
	return o.DefaultZone
}

func (o *BatchVolumesPlanRequestBody) GetDefaultPolicy() *string {
	if o == nil {
		return nil
	}
	return o.DefaultPolicy
}

type BatchVolumesPlanRequest struct {
	// if true will return the volume plan if false will omit the plan from the response
	Verbose     *bool                       `default:"true" queryParam:"style=form,explode=true,name=verbose"`
	RequestBody BatchVolumesPlanRequestBody `request:"mediaType=application/json"`
}

func (b BatchVolumesPlanRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BatchVolumesPlanRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *BatchVolumesPlanRequest) GetVerbose() *bool {
	if o == nil {
		return nil
	}
	return o.Verbose
}

func (o *BatchVolumesPlanRequest) GetRequestBody() BatchVolumesPlanRequestBody {
	if o == nil {
		return BatchVolumesPlanRequestBody{}
	}
	return o.RequestBody
}

type BatchVolumesPlanResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// volume plan output
	VolumePlanOutput *components.VolumePlanOutput
	Headers          map[string][]string
}

func (o *BatchVolumesPlanResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *BatchVolumesPlanResponse) GetVolumePlanOutput() *components.VolumePlanOutput {
	if o == nil {
		return nil
	}
	return o.VolumePlanOutput
}

func (o *BatchVolumesPlanResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}

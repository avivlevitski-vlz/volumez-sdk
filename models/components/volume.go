// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/avivlevitski-vlz/volumez-sdk/internal/utils"
)

type Type string

const (
	TypeFile  Type = "file"
	TypeBlock Type = "block"
)

func (e Type) ToPointer() *Type {
	return &e
}
func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "file":
		fallthrough
	case "block":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type Flavor string

const (
	FlavorRegular    Flavor = "regular"
	FlavorFiledirect Flavor = "filedirect"
)

func (e Flavor) ToPointer() *Flavor {
	return &e
}
func (e *Flavor) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "regular":
		fallthrough
	case "filedirect":
		*e = Flavor(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Flavor: %v", v)
	}
}

type Volume struct {
	Name                       string  `json:"name"`
	Volumeid                   *string `json:"volumeid,omitempty"`
	Type                       Type    `json:"type"`
	Contentvolume              *string `json:"contentvolume,omitempty"`
	Contentsnapshot            *string `json:"contentsnapshot,omitempty"`
	Size                       int64   `json:"size"`
	Maxsize                    *int64  `json:"maxsize,omitempty"`
	Policy                     string  `json:"policy"`
	Consistencygroup           *string `json:"consistencygroup,omitempty"`
	Node                       *string `json:"node,omitempty"`
	Zone                       *string `json:"zone,omitempty"`
	Zonereplica                *string `json:"zonereplica,omitempty"`
	Volumegroupname            *string `json:"volumegroupname,omitempty"`
	Volumegroupid              *string `json:"volumegroupid,omitempty"`
	Replicationnode            *string `json:"replicationnode,omitempty"`
	Replicationvolumegroupname *string `json:"replicationvolumegroupname,omitempty"`
	Replicationvolumegroupid   *string `json:"replicationvolumegroupid,omitempty"`
	Volumerecoveryjob          *string `json:"volumerecoveryjob,omitempty"`
	State                      *string `json:"state,omitempty"`
	Status                     *string `json:"status,omitempty"`
	Progress                   *int64  `json:"progress,omitempty"`
	Capacitygroup              *string `json:"capacitygroup,omitempty"`
	Throttlingscheme           *string `json:"throttlingscheme,omitempty"`
	Allowdatamovement          *bool   `default:"false" json:"allowdatamovement"`
	Flavor                     *Flavor `json:"flavor,omitempty"`
}

func (v Volume) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *Volume) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Volume) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Volume) GetVolumeid() *string {
	if o == nil {
		return nil
	}
	return o.Volumeid
}

func (o *Volume) GetType() Type {
	if o == nil {
		return Type("")
	}
	return o.Type
}

func (o *Volume) GetContentvolume() *string {
	if o == nil {
		return nil
	}
	return o.Contentvolume
}

func (o *Volume) GetContentsnapshot() *string {
	if o == nil {
		return nil
	}
	return o.Contentsnapshot
}

func (o *Volume) GetSize() int64 {
	if o == nil {
		return 0
	}
	return o.Size
}

func (o *Volume) GetMaxsize() *int64 {
	if o == nil {
		return nil
	}
	return o.Maxsize
}

func (o *Volume) GetPolicy() string {
	if o == nil {
		return ""
	}
	return o.Policy
}

func (o *Volume) GetConsistencygroup() *string {
	if o == nil {
		return nil
	}
	return o.Consistencygroup
}

func (o *Volume) GetNode() *string {
	if o == nil {
		return nil
	}
	return o.Node
}

func (o *Volume) GetZone() *string {
	if o == nil {
		return nil
	}
	return o.Zone
}

func (o *Volume) GetZonereplica() *string {
	if o == nil {
		return nil
	}
	return o.Zonereplica
}

func (o *Volume) GetVolumegroupname() *string {
	if o == nil {
		return nil
	}
	return o.Volumegroupname
}

func (o *Volume) GetVolumegroupid() *string {
	if o == nil {
		return nil
	}
	return o.Volumegroupid
}

func (o *Volume) GetReplicationnode() *string {
	if o == nil {
		return nil
	}
	return o.Replicationnode
}

func (o *Volume) GetReplicationvolumegroupname() *string {
	if o == nil {
		return nil
	}
	return o.Replicationvolumegroupname
}

func (o *Volume) GetReplicationvolumegroupid() *string {
	if o == nil {
		return nil
	}
	return o.Replicationvolumegroupid
}

func (o *Volume) GetVolumerecoveryjob() *string {
	if o == nil {
		return nil
	}
	return o.Volumerecoveryjob
}

func (o *Volume) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *Volume) GetStatus() *string {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Volume) GetProgress() *int64 {
	if o == nil {
		return nil
	}
	return o.Progress
}

func (o *Volume) GetCapacitygroup() *string {
	if o == nil {
		return nil
	}
	return o.Capacitygroup
}

func (o *Volume) GetThrottlingscheme() *string {
	if o == nil {
		return nil
	}
	return o.Throttlingscheme
}

func (o *Volume) GetAllowdatamovement() *bool {
	if o == nil {
		return nil
	}
	return o.Allowdatamovement
}

func (o *Volume) GetFlavor() *Flavor {
	if o == nil {
		return nil
	}
	return o.Flavor
}

type VolumeInput struct {
	Name                       string  `json:"name"`
	Type                       Type    `json:"type"`
	Contentvolume              *string `json:"contentvolume,omitempty"`
	Contentsnapshot            *string `json:"contentsnapshot,omitempty"`
	Size                       int64   `json:"size"`
	Policy                     string  `json:"policy"`
	Consistencygroup           *string `json:"consistencygroup,omitempty"`
	Zone                       *string `json:"zone,omitempty"`
	Zonereplica                *string `json:"zonereplica,omitempty"`
	Volumegroupname            *string `json:"volumegroupname,omitempty"`
	Replicationnode            *string `json:"replicationnode,omitempty"`
	Replicationvolumegroupname *string `json:"replicationvolumegroupname,omitempty"`
	Capacitygroup              *string `json:"capacitygroup,omitempty"`
	Throttlingscheme           *string `json:"throttlingscheme,omitempty"`
	Allowdatamovement          *bool   `default:"false" json:"allowdatamovement"`
	Flavor                     *Flavor `json:"flavor,omitempty"`
}

func (v VolumeInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *VolumeInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *VolumeInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *VolumeInput) GetType() Type {
	if o == nil {
		return Type("")
	}
	return o.Type
}

func (o *VolumeInput) GetContentvolume() *string {
	if o == nil {
		return nil
	}
	return o.Contentvolume
}

func (o *VolumeInput) GetContentsnapshot() *string {
	if o == nil {
		return nil
	}
	return o.Contentsnapshot
}

func (o *VolumeInput) GetSize() int64 {
	if o == nil {
		return 0
	}
	return o.Size
}

func (o *VolumeInput) GetPolicy() string {
	if o == nil {
		return ""
	}
	return o.Policy
}

func (o *VolumeInput) GetConsistencygroup() *string {
	if o == nil {
		return nil
	}
	return o.Consistencygroup
}

func (o *VolumeInput) GetZone() *string {
	if o == nil {
		return nil
	}
	return o.Zone
}

func (o *VolumeInput) GetZonereplica() *string {
	if o == nil {
		return nil
	}
	return o.Zonereplica
}

func (o *VolumeInput) GetVolumegroupname() *string {
	if o == nil {
		return nil
	}
	return o.Volumegroupname
}

func (o *VolumeInput) GetReplicationnode() *string {
	if o == nil {
		return nil
	}
	return o.Replicationnode
}

func (o *VolumeInput) GetReplicationvolumegroupname() *string {
	if o == nil {
		return nil
	}
	return o.Replicationvolumegroupname
}

func (o *VolumeInput) GetCapacitygroup() *string {
	if o == nil {
		return nil
	}
	return o.Capacitygroup
}

func (o *VolumeInput) GetThrottlingscheme() *string {
	if o == nil {
		return nil
	}
	return o.Throttlingscheme
}

func (o *VolumeInput) GetAllowdatamovement() *bool {
	if o == nil {
		return nil
	}
	return o.Allowdatamovement
}

func (o *VolumeInput) GetFlavor() *Flavor {
	if o == nil {
		return nil
	}
	return o.Flavor
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type AlertType string

const (
	AlertTypeStateChange      AlertType = "StateChange"
	AlertTypeProcessFailed    AlertType = "ProcessFailed"
	AlertTypeThresholdReached AlertType = "ThresholdReached"
)

func (e AlertType) ToPointer() *AlertType {
	return &e
}
func (e *AlertType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "StateChange":
		fallthrough
	case "ProcessFailed":
		fallthrough
	case "ThresholdReached":
		*e = AlertType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AlertType: %v", v)
	}
}

type AlertState string

const (
	AlertStateActive       AlertState = "Active"
	AlertStateAcknowledged AlertState = "Acknowledged"
	AlertStateCleared      AlertState = "Cleared"
)

func (e AlertState) ToPointer() *AlertState {
	return &e
}
func (e *AlertState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Active":
		fallthrough
	case "Acknowledged":
		fallthrough
	case "Cleared":
		*e = AlertState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AlertState: %v", v)
	}
}

type AlertSeverity string

const (
	AlertSeverityInfo     AlertSeverity = "Info"
	AlertSeverityWarning  AlertSeverity = "Warning"
	AlertSeverityCritical AlertSeverity = "Critical"
	AlertSeverityFatal    AlertSeverity = "Fatal"
)

func (e AlertSeverity) ToPointer() *AlertSeverity {
	return &e
}
func (e *AlertSeverity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Info":
		fallthrough
	case "Warning":
		fallthrough
	case "Critical":
		fallthrough
	case "Fatal":
		*e = AlertSeverity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AlertSeverity: %v", v)
	}
}

type AlertUnderlyingObjectType string

const (
	AlertUnderlyingObjectTypeMedia      AlertUnderlyingObjectType = "Media"
	AlertUnderlyingObjectTypeNode       AlertUnderlyingObjectType = "Node"
	AlertUnderlyingObjectTypeVolume     AlertUnderlyingObjectType = "Volume"
	AlertUnderlyingObjectTypeSnapshot   AlertUnderlyingObjectType = "Snapshot"
	AlertUnderlyingObjectTypeAttachment AlertUnderlyingObjectType = "Attachment"
)

func (e AlertUnderlyingObjectType) ToPointer() *AlertUnderlyingObjectType {
	return &e
}
func (e *AlertUnderlyingObjectType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Media":
		fallthrough
	case "Node":
		fallthrough
	case "Volume":
		fallthrough
	case "Snapshot":
		fallthrough
	case "Attachment":
		*e = AlertUnderlyingObjectType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AlertUnderlyingObjectType: %v", v)
	}
}

type Alert struct {
	Alertid      *string                    `json:"alertid,omitempty"`
	Type         *AlertType                 `json:"type,omitempty"`
	State        *AlertState                `json:"state,omitempty"`
	Severity     *AlertSeverity             `json:"severity,omitempty"`
	Objecttype   *AlertUnderlyingObjectType `json:"objecttype,omitempty"`
	Objectid     *string                    `json:"objectid,omitempty"`
	Creationtime *string                    `json:"creationtime,omitempty"`
	Lastsendtime *string                    `json:"lastsendtime,omitempty"`
	Cleartime    *string                    `json:"cleartime,omitempty"`
	Details      *string                    `json:"details,omitempty"`
}

func (o *Alert) GetAlertid() *string {
	if o == nil {
		return nil
	}
	return o.Alertid
}

func (o *Alert) GetType() *AlertType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Alert) GetState() *AlertState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *Alert) GetSeverity() *AlertSeverity {
	if o == nil {
		return nil
	}
	return o.Severity
}

func (o *Alert) GetObjecttype() *AlertUnderlyingObjectType {
	if o == nil {
		return nil
	}
	return o.Objecttype
}

func (o *Alert) GetObjectid() *string {
	if o == nil {
		return nil
	}
	return o.Objectid
}

func (o *Alert) GetCreationtime() *string {
	if o == nil {
		return nil
	}
	return o.Creationtime
}

func (o *Alert) GetLastsendtime() *string {
	if o == nil {
		return nil
	}
	return o.Lastsendtime
}

func (o *Alert) GetCleartime() *string {
	if o == nil {
		return nil
	}
	return o.Cleartime
}

func (o *Alert) GetDetails() *string {
	if o == nil {
		return nil
	}
	return o.Details
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type OsType string

const (
	OsTypeLinux  OsType = "Linux"
	OsTypeRhel   OsType = "Rhel"
	OsTypeUbuntu OsType = "Ubuntu"
)

func (e OsType) ToPointer() *OsType {
	return &e
}
func (e *OsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Linux":
		fallthrough
	case "Rhel":
		fallthrough
	case "Ubuntu":
		*e = OsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OsType: %v", v)
	}
}

type AutoProvisionInfraPlan struct {
	InstanceType      *string  `json:"instanceType,omitempty"`
	InstanceCount     *int64   `json:"instanceCount,omitempty"`
	AvailabilityZones []string `json:"availabilityZones,omitempty"`
	OsType            *OsType  `json:"osType,omitempty"`
	Price             *int64   `json:"price,omitempty"`
}

func (o *AutoProvisionInfraPlan) GetInstanceType() *string {
	if o == nil {
		return nil
	}
	return o.InstanceType
}

func (o *AutoProvisionInfraPlan) GetInstanceCount() *int64 {
	if o == nil {
		return nil
	}
	return o.InstanceCount
}

func (o *AutoProvisionInfraPlan) GetAvailabilityZones() []string {
	if o == nil {
		return nil
	}
	return o.AvailabilityZones
}

func (o *AutoProvisionInfraPlan) GetOsType() *OsType {
	if o == nil {
		return nil
	}
	return o.OsType
}

func (o *AutoProvisionInfraPlan) GetPrice() *int64 {
	if o == nil {
		return nil
	}
	return o.Price
}
